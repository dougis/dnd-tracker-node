name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  CODACY_PROJECT_TOKEN: '53da3433be834ab4bd5d58f36c1639c4'

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate Prisma client
        run: |
          cd packages/server
          npm run db:generate
        
      - name: Run lint
        run: npm run lint:fix
        
      - name: Run typecheck
        run: npm run typecheck
        
      - name: Run tests with coverage
        run: npm run test:ci
        
      - name: Upload coverage to Codacy (Client)
        if: matrix.node-version == '18.x'
        uses: codacy/codacy-coverage-reporter-action@3f58b0e12285221110375dffef1150534700246b
        with:
          project-token: ${{ env.CODACY_PROJECT_TOKEN }}
          coverage-reports: packages/client/coverage/clover.xml
          
      - name: Upload coverage to Codacy (Server)
        if: matrix.node-version == '18.x'
        uses: codacy/codacy-coverage-reporter-action@3f58b0e12285221110375dffef1150534700246b
        with:
          project-token: ${{ env.CODACY_PROJECT_TOKEN }}
          coverage-reports: packages/server/coverage/clover.xml
          
      - name: Upload coverage to Codacy (Shared)
        if: matrix.node-version == '18.x'
        uses: codacy/codacy-coverage-reporter-action@3f58b0e12285221110375dffef1150534700246b
        with:
          project-token: ${{ env.CODACY_PROJECT_TOKEN }}
          coverage-reports: packages/shared/coverage/clover.xml

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate Prisma client
        run: |
          cd packages/server
          npm run db:generate
        
      - name: Build application
        run: npm run build

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [test, build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level moderate
        
      - name: Upload SARIF to GitHub
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif