// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  email               String          @unique
  username            String          @unique
  passwordHash        String
  isEmailVerified     Boolean         @default(false)
  isAdmin             Boolean         @default(false)

  // Security
  failedLoginAttempts Int             @default(0)
  lockedUntil         DateTime?

  // Relations
  subscription        Subscription?
  usage               Usage?
  sessions            Session[]
  parties             Party[]
  encounters          Encounter[]
  creatures           Creature[]
  payments            Payment[]

  // Timestamps
  lastLoginAt         DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  @@map("users")
}

model ProcessedEvent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId   String   @unique
  source    String   // e.g., "stripe"
  createdAt DateTime @default(now())

  @@map("processed_events")
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@map("sessions")
}

model Subscription {
  id                    String              @id @default(auto()) @map("_id") @db.ObjectId
  userId                String              @unique @db.ObjectId
  user                  User                @relation(fields: [userId], references: [id])
  
  tier                  SubscriptionTier    @default(FREE)
  status                SubscriptionStatus  @default(ACTIVE)
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  cancelAtPeriodEnd     Boolean             @default(false)
  
  // Stripe
  stripeCustomerId      String?             @unique
  stripeSubscriptionId  String?             @unique
  stripePriceId         String?
  
  // Trial
  trialEnd              DateTime?
  
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  @@map("subscriptions")
}

model Usage {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @unique @db.ObjectId
  user              User     @relation(fields: [userId], references: [id])
  
  partiesCreated    Int      @default(0)
  encountersCreated Int      @default(0)
  creaturesCreated  Int      @default(0)
  
  currentPeriodStart DateTime @default(now())
  lastResetDate      DateTime @default(now())
  
  @@map("usage")
}

model Party {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  user        User        @relation(fields: [userId], references: [id])
  
  name        String
  description String?
  isArchived  Boolean     @default(false)
  
  characters  Character[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([userId, isArchived])
  @@map("parties")
}

model Character {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  partyId       String          @db.ObjectId
  party         Party           @relation(fields: [partyId], references: [id], onDelete: Cascade)
  
  name          String
  playerName    String?
  race          String
  classes       Json            // Array of {className, level}
  level         Int             @default(1)
  
  // Combat stats
  ac            Int             @default(10)
  maxHp         Int             @default(10)
  currentHp     Int             @default(10)
  tempHp        Int             @default(0)
  hitDice       String?
  speed         Int             @default(30)
  
  // Abilities
  abilities     Json            // {str, dex, con, int, wis, cha}
  
  // Additional
  proficiencyBonus Int          @default(2)
  features      String[]
  equipment     String[]
  notes         String?
  
  // Relations
  participations Participant[]
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@map("characters")
}

model Encounter {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  userId        String              @db.ObjectId
  user          User                @relation(fields: [userId], references: [id])
  
  name          String
  description   String?
  status        EncounterStatus     @default(PLANNING)
  
  // Combat state
  round         Int                 @default(1)
  turn          Int                 @default(0)
  isActive      Boolean             @default(false)
  
  // Relations
  participants  Participant[]
  lairActions   LairAction?
  combatLogs    CombatLog[]
  
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  @@index([userId, status])
  @@map("encounters")
}

model Participant {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  encounterId   String      @db.ObjectId
  encounter     Encounter   @relation(fields: [encounterId], references: [id], onDelete: Cascade)
  
  type          ParticipantType
  characterId   String?     @db.ObjectId
  character     Character?  @relation(fields: [characterId], references: [id])
  creatureId    String?     @db.ObjectId
  creature      Creature?   @relation(fields: [creatureId], references: [id])
  
  // Combat stats (may override base)
  name          String
  initiative    Int
  initiativeRoll Int?
  currentHp     Int
  maxHp         Int
  tempHp        Int         @default(0)
  ac            Int
  
  // Status
  conditions    Json[]      // Array of conditions
  isActive      Boolean     @default(true)
  notes         String?
  
  @@index([encounterId])
  @@map("participants")
}

model Creature {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  userId        String?         @db.ObjectId  // null for system templates
  user          User?           @relation(fields: [userId], references: [id])
  
  name          String
  size          CreatureSize
  type          String
  subtype       String?
  alignment     String?
  
  // Combat stats
  ac            Int
  hp            Int
  hitDice       String?
  speed         Json            // {walk, swim, fly, climb, burrow}
  
  // Abilities
  abilities     Json            // {str, dex, con, int, wis, cha}
  
  // CR and proficiency
  challengeRating String?
  proficiencyBonus Int?
  
  // Features
  traits        Json[]
  actions       Json[]
  reactions     Json[]
  legendaryActions Json?        // {count, actions}
  lairActions   Json[]
  
  // Metadata
  isTemplate    Boolean         @default(true)
  source        String?
  tags          String[]
  
  // Relations
  participations Participant[]
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@index([userId, isTemplate])
  @@index([name])
  @@map("creatures")
}

model LairAction {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  encounterId   String      @unique @db.ObjectId
  encounter     Encounter   @relation(fields: [encounterId], references: [id], onDelete: Cascade)
  
  enabled       Boolean     @default(false)
  initiative    Int         @default(20)
  actions       Json[]      // Array of {name, description, recharge}
  
  @@map("lair_actions")
}

model CombatLog {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  encounterId   String      @db.ObjectId
  encounter     Encounter   @relation(fields: [encounterId], references: [id], onDelete: Cascade)
  
  timestamp     DateTime    @default(now())
  round         Int
  turn          Int
  action        String
  actor         String?
  target        String?
  details       Json?
  
  @@index([encounterId, timestamp])
  @@map("combat_logs")
}

model Payment {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  userId                String          @db.ObjectId
  user                  User            @relation(fields: [userId], references: [id])
  
  stripePaymentIntentId String          @unique
  amount                Int
  currency              String          @default("usd")
  status                PaymentStatus
  subscriptionTier      String?
  metadata              Json?
  
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  
  @@map("payments")
}

// Enums
enum SubscriptionTier {
  FREE
  SEASONED
  EXPERT
  MASTER
  GUILD
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  TRIAL
}

enum EncounterStatus {
  PLANNING
  ACTIVE
  PAUSED
  COMPLETED
}

enum ParticipantType {
  CHARACTER
  CREATURE
}

enum CreatureSize {
  TINY
  SMALL
  MEDIUM
  LARGE
  HUGE
  GARGANTUAN
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
}